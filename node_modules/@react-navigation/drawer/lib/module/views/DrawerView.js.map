{"version":3,"sources":["DrawerView.tsx"],"names":["React","Dimensions","StyleSheet","I18nManager","Platform","ScreenContainer","DrawerActions","useTheme","DrawerGestureContext","SafeAreaProviderCompat","ResourceSavingScene","DrawerContent","Drawer","getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","OS","maxWidth","DrawerView","state","navigation","descriptors","lazy","drawerContent","props","drawerPosition","isRTL","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","drawerContentOptions","drawerStyle","edgeWidth","gestureHandlerProps","minSwipeDistance","sceneContainerStyle","unmountInactiveScreens","useState","index","loaded","setLoaded","get","drawerWidth","setDrawerWidth","drawerGestureRef","useRef","colors","useEffect","updateWidth","window","addEventListener","removeEventListener","includes","handleDrawerOpen","dispatch","openDrawer","target","key","emit","type","handleDrawerClose","closeDrawer","renderNavigationView","progress","renderContent","styles","content","routes","map","route","isFocused","descriptor","absoluteFill","opacity","render","activeKey","gestureEnabled","options","isDrawerOpen","ref","current","backgroundColor","background","card","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Dimensions,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  ScaledSize,\n} from 'react-native';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport {\n  DrawerNavigationState,\n  DrawerActions,\n} from '@react-navigation/routers';\nimport { useTheme } from '@react-navigation/native';\n\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n} from '../types';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/guidelines/patterns/navigation-drawer.html\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n  unmountInactiveScreens,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.index]);\n  const [drawerWidth, setDrawerWidth] = React.useState(() =>\n    getDefaultDrawerWidth(Dimensions.get('window'))\n  );\n\n  const drawerGestureRef = React.useRef<PanGestureHandler>(null);\n\n  const { colors } = useTheme();\n\n  React.useEffect(() => {\n    const updateWidth = ({ window }: { window: ScaledSize }) => {\n      setDrawerWidth(getDefaultDrawerWidth(window));\n    };\n\n    Dimensions.addEventListener('change', updateWidth);\n\n    return () => Dimensions.removeEventListener('change', updateWidth);\n  }, []);\n\n  if (!loaded.includes(state.index)) {\n    setLoaded([...loaded, state.index]);\n  }\n\n  const handleDrawerOpen = () => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n\n    navigation.emit({ type: 'drawerOpen' });\n  };\n\n  const handleDrawerClose = () => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n\n    navigation.emit({ type: 'drawerClose' });\n  };\n\n  const renderNavigationView = ({ progress }: any) => {\n    return drawerContent({\n      ...drawerContentOptions,\n      progress: progress,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors,\n      drawerPosition: drawerPosition,\n    });\n  };\n\n  const renderContent = () => {\n    return (\n      <ScreenContainer style={styles.content}>\n        {state.routes.map((route, index) => {\n          if (unmountInactiveScreens && index !== state.index) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(index) && index !== state.index) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const isFocused = state.index === index;\n          const descriptor = descriptors[route.key];\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n            >\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled } = descriptors[activeKey].options;\n\n  return (\n    <SafeAreaProviderCompat>\n      <DrawerGestureContext.Provider value={drawerGestureRef}>\n        <Drawer\n          open={state.isDrawerOpen}\n          gestureEnabled={gestureEnabled !== false}\n          onOpen={handleDrawerOpen}\n          onClose={handleDrawerClose}\n          onGestureRef={ref => {\n            // @ts-ignore\n            drawerGestureRef.current = ref;\n          }}\n          gestureHandlerProps={gestureHandlerProps}\n          drawerType={drawerType}\n          drawerPosition={drawerPosition}\n          sceneContainerStyle={[\n            { backgroundColor: colors.background },\n            sceneContainerStyle,\n          ]}\n          drawerStyle={[\n            { width: drawerWidth, backgroundColor: colors.card },\n            drawerStyle,\n          ]}\n          overlayStyle={{ backgroundColor: overlayColor }}\n          swipeEdgeWidth={edgeWidth}\n          swipeDistanceThreshold={minSwipeDistance}\n          hideStatusBar={hideStatusBar}\n          statusBarAnimation={statusBarAnimation}\n          renderDrawerContent={renderNavigationView}\n          renderSceneContent={renderContent}\n          keyboardDismissMode={keyboardDismissMode}\n          drawerPostion={drawerPosition}\n        />\n      </DrawerGestureContext.Provider>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]}