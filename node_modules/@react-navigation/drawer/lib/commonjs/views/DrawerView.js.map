{"version":3,"sources":["DrawerView.tsx"],"names":["getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","DrawerView","state","navigation","descriptors","lazy","drawerContent","props","drawerPosition","I18nManager","isRTL","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","drawerContentOptions","drawerStyle","edgeWidth","gestureHandlerProps","minSwipeDistance","sceneContainerStyle","unmountInactiveScreens","React","useState","index","loaded","setLoaded","Dimensions","get","drawerWidth","setDrawerWidth","drawerGestureRef","useRef","colors","useEffect","updateWidth","window","addEventListener","removeEventListener","includes","handleDrawerOpen","dispatch","DrawerActions","openDrawer","target","key","emit","type","handleDrawerClose","closeDrawer","renderNavigationView","progress","renderContent","styles","content","routes","map","route","isFocused","descriptor","StyleSheet","absoluteFill","opacity","render","activeKey","gestureEnabled","options","isDrawerOpen","ref","current","backgroundColor","background","card","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Dimensions,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  ScaledSize,\n} from 'react-native';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport {\n  DrawerNavigationState,\n  DrawerActions,\n} from '@react-navigation/routers';\nimport { useTheme } from '@react-navigation/native';\n\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n} from '../types';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/guidelines/patterns/navigation-drawer.html\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n  unmountInactiveScreens,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.index]);\n  const [drawerWidth, setDrawerWidth] = React.useState(() =>\n    getDefaultDrawerWidth(Dimensions.get('window'))\n  );\n\n  const drawerGestureRef = React.useRef<PanGestureHandler>(null);\n\n  const { colors } = useTheme();\n\n  React.useEffect(() => {\n    const updateWidth = ({ window }: { window: ScaledSize }) => {\n      setDrawerWidth(getDefaultDrawerWidth(window));\n    };\n\n    Dimensions.addEventListener('change', updateWidth);\n\n    return () => Dimensions.removeEventListener('change', updateWidth);\n  }, []);\n\n  if (!loaded.includes(state.index)) {\n    setLoaded([...loaded, state.index]);\n  }\n\n  const handleDrawerOpen = () => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n\n    navigation.emit({ type: 'drawerOpen' });\n  };\n\n  const handleDrawerClose = () => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n\n    navigation.emit({ type: 'drawerClose' });\n  };\n\n  const renderNavigationView = ({ progress }: any) => {\n    return drawerContent({\n      ...drawerContentOptions,\n      progress: progress,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors,\n      drawerPosition: drawerPosition,\n    });\n  };\n\n  const renderContent = () => {\n    return (\n      <ScreenContainer style={styles.content}>\n        {state.routes.map((route, index) => {\n          if (unmountInactiveScreens && index !== state.index) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(index) && index !== state.index) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const isFocused = state.index === index;\n          const descriptor = descriptors[route.key];\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n            >\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled } = descriptors[activeKey].options;\n\n  return (\n    <SafeAreaProviderCompat>\n      <DrawerGestureContext.Provider value={drawerGestureRef}>\n        <Drawer\n          open={state.isDrawerOpen}\n          gestureEnabled={gestureEnabled !== false}\n          onOpen={handleDrawerOpen}\n          onClose={handleDrawerClose}\n          onGestureRef={ref => {\n            // @ts-ignore\n            drawerGestureRef.current = ref;\n          }}\n          gestureHandlerProps={gestureHandlerProps}\n          drawerType={drawerType}\n          drawerPosition={drawerPosition}\n          sceneContainerStyle={[\n            { backgroundColor: colors.background },\n            sceneContainerStyle,\n          ]}\n          drawerStyle={[\n            { width: drawerWidth, backgroundColor: colors.card },\n            drawerStyle,\n          ]}\n          overlayStyle={{ backgroundColor: overlayColor }}\n          swipeEdgeWidth={edgeWidth}\n          swipeDistanceThreshold={minSwipeDistance}\n          hideStatusBar={hideStatusBar}\n          statusBarAnimation={statusBarAnimation}\n          renderDrawerContent={renderNavigationView}\n          renderSceneContent={renderContent}\n          keyboardDismissMode={keyboardDismissMode}\n          drawerPostion={drawerPosition}\n        />\n      </DrawerGestureContext.Provider>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]}